{
    "fragment": "#version 440 core\n\nin GS_OUT {\n    vec4 Color;\n    vec2 SecData;\n    float Pos;\n} fs_in;\n\nlayout (location = 0) out vec4 fragColor;\nlayout (location = 1) out vec4 brightColor;\n\nconst vec2 texCoord[4] = vec2[](vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 1.0));\n\nvoid main()\n{\n    if(fs_in.SecData.x == 0.0 || fs_in.Color.a == 0.0)\n        discard;\n\t\n    fragColor = fs_in.Color;\n    brightColor = vec4(fragColor.rgb * fs_in.SecData.y, 1.0);\n}",
    "geometry": "#version 440 core\n\nlayout (points) in;\nlayout (triangle_strip, max_vertices = 6) out;\n\nuniform float wh;\n\nin VS_OUT {\n    vec4 Color;\n    vec2 SecData;\n    float Size;\n    float Rotation;\n} gs_in[]; \n\nout GS_OUT {\n    vec4 Color;\n    vec2 SecData;\n    float Pos;\n} gs_out;\n\nvec2 Rotate(vec2 a, float Angle)\n{\n    vec2 ret;\n\n    ret.x = a.x * cos(Angle) - a.y * sin(Angle);\n    ret.y = (a.y * cos(Angle) + a.x * sin(Angle)) * wh;\n\n    return ret;\n}\n\nvoid main()\n{\n    gs_out.Color = gs_in[0].Color;\n    gs_out.SecData = gs_in[0].SecData;\n\n    vec3 p = gl_in[0].gl_Position.xyz;\n    float w = gl_in[0].gl_Position.w;\n    float size = gs_in[0].Size;\n\n    gs_out.Pos = 1.0;\n    gl_Position = vec4(p + vec3(Rotate(vec2(-1.0 * size, -1.0 * size), gs_in[0].Rotation).xy, 0.0), w);\n    EmitVertex();\n\n    gs_out.Pos = 2.0;\n    gl_Position = vec4(p + vec3(Rotate(vec2(1.0 * size, -1.0 * size), gs_in[0].Rotation).xy, 0.0), w);\n    EmitVertex();\n\n    gs_out.Pos = 0.0;\n    gl_Position = vec4(p + vec3(Rotate(vec2(-1.0 * size, 1.0 * size), gs_in[0].Rotation).xy, 0.0), w);\n    EmitVertex();\n\n    gs_out.Pos = 3.0;\n    gl_Position = vec4(p + vec3(Rotate(vec2(1.0 * size, 1.0 * size), gs_in[0].Rotation).xy, 0.0), w);\n    EmitVertex();\n    EndPrimitive();\n}",
    "shaderName": "ParticleCPU",
    "tag": "SHADER",
    "vertex": "#version 440 core\n\nlayout (location = 0) in vec4 aPosAndSize;\nlayout (location = 1) in vec4 aColor;\nlayout (location = 2) in vec2 aSecData;\nlayout (location = 2) in vec4 aUV;\nlayout (location = 3) in float aRotation;\n\nuniform mat4 model;\nuniform mat4 vp;\n\nout VS_OUT {\n    vec4 Color;\n    vec2 SecData;\n    float Size;\n    float Rotation;\n} vs_out;\n\nvoid main()\n{\n    gl_Position = vp * model * vec4(aPosAndSize.xyz, 1.0);\n\n    vs_out.Color = aColor;\n    vs_out.SecData = aSecData;\n    vs_out.Size = aPosAndSize.w;\n    vs_out.Rotation = aRotation;\n}"
}